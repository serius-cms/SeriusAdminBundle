{% extends "@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig" %}

{% block url_widget -%}
	<div class="input-group">
		<span class="input-group-addon">http://</span>
		{{- block('form_widget_simple') -}}
	</div>
{%- endblock url_widget %}

{% block money_widget -%}
	<div class="input-group">
		{% set prepend = '{{' == money_pattern[0:2] %}
		{% if not prepend %}
			<span class="input-group-addon">{{ money_pattern|replace({ '{{ widget }}':''}) }}</span>
		{% endif %}
		{{- block('form_widget_simple') -}}
		{% if prepend %}
			<span class="input-group-addon">{{ money_pattern|replace({ '{{ widget }}':''}) }}</span>
		{% endif %}
	</div>
{%- endblock money_widget %}

{% block percent_widget -%}
	<div class="input-group">
		{{- block('form_widget_simple') -}}
		<span class="input-group-addon">%</span>
	</div>
{%- endblock percent_widget %}

{% block datetime_widget -%}
	{% if widget == 'single_text' %}
		{{- block('form_widget_simple') -}}
	{% else %}
		{% set attr = attr|merge({class: (attr.class|default('') ~ ' form-inline')|trim}) %}
		<div {{ block('widget_container_attributes') }}>
			{{ form_errors(form.date) }}
			{{ form_errors(form.time) }}
			{{ form_widget(form.date, { datetime: true } ) }}&nbsp;
			{{ form_widget(form.time, { datetime: true } ) }}
		</div>
	{% endif %}
{%- endblock datetime_widget %}

{% block date_widget -%}
	{% if widget == 'single_text' %}
		{{- block('form_widget_simple') -}}
	{% else %}
		{% set attr = attr|merge({class: (attr.class|default('') ~ ' form-inline')|trim}) %}
		{% if datetime is not defined or not datetime %}
			<div {{ block('widget_container_attributes') -}}>
		{% endif %}
		{{ date_pattern|replace({
			'{{ year }}': form_widget(form.year),
			'{{ month }}': form_widget(form.month),
			'{{ day }}': form_widget(form.day),
		})|raw }}
		{% if datetime is not defined or not datetime %}
			</div>
		{% endif %}
	{% endif %}
{%- endblock date_widget %}

{% block time_widget -%}
	{% if widget == 'single_text' %}
		{{- block('form_widget_simple') -}}
	{% else %}
		{% set attr = attr|merge({class: (attr.class|default('') ~ ' form-inline')|trim}) %}
		{% if datetime is not defined or false == datetime %}
			<div {{ block('widget_container_attributes') -}}>
		{% endif %}
		{{ form_widget(form.hour) }} : {{ form_widget(form.minute) }}{% if with_seconds %} : {{ form_widget(form.second) }}{% endif %}
		{% if datetime is not defined or false == datetime %}
			</div>
		{% endif %}
	{% endif %}
{%- endblock time_widget %}

{% block widget_container_attributes_choice_widget %}
    {% spaceless %}
        id="{{ id }}"
        {% for attrname,attrvalue in attr %}{{attrname}}="{% if attrname == 'class' %}list-unstyled {% endif%}{{attrvalue}}" {% endfor %}
        {% if "class" not in attr %}class="list-unstyled"{%endif %}
    {% endspaceless %}
{% endblock %}

{% block choice_widget %}
    {% spaceless %}
        {% if compound %}
            <ul {{ block('widget_container_attributes_choice_widget') }}>
                {% for child in form %}
                    <li class="{{ multiple ? 'checkbox' : 'radio' }}">
                        {% set form_widget_content %}
                        {{ form_widget(child, {'horizontal': false, 'horizontal_input_wrapper_class': ''}) }} {# {'horizontal': false, 'horizontal_input_wrapper_class': ''} needed to avoid MopaBootstrapBundle messing with the DOM #}
                        {% endset %}
                        {{ form_label(child, child.vars.label|default(null), { 'in_list_checkbox' : true, 'widget' : form_widget_content } ) }}
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            {% set attr = attr|merge({ 'class': (attr.class|default('') ~ ' form-control')|trim }) %}
            <select {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %}>
                {% if empty_value is not none %}
                    <option value="">
                        {% if not sonata_admin.admin %}
                            {{- empty_value|trans({}, translation_domain) -}}
                        {% else %}
                            {{- empty_value|trans({}, sonata_admin.field_description.translationDomain) -}}
                        {% endif%}
                    </option>
                {% endif %}
                {% if preferred_choices|length > 0 %}
                    {% set options = preferred_choices %}
                    {{ block('choice_widget_options') }}
                    {% if choices|length > 0 %}
                        <option disabled="disabled">{{ separator }}</option>
                    {% endif %}
                {% endif %}
                {% set options = choices %}
                {{ block('choice_widget_options') }}
            </select>
        {% endif %}
    {% endspaceless %}
{% endblock choice_widget %}

{# sonata_type_model #}
{% block sonata_type_model_widget %}
    {% if sonata_admin.field_description is empty %}
        {{ block('choice_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE') %}
        {{ block('sonata_admin_orm_one_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
        {{ block('sonata_admin_orm_many_to_one_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% else %}
        {#INVALID MODE : {{ id }}#}
        {{ block('choice_widget') }}
    {% endif %}
{% endblock %}

{% block sonata_admin_orm_one_to_one_widget %}
	{% include 'SeriusAdminBundle:CRUD:edit_orm_one_to_one.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_many_to_one_widget %}
	{% include 'SeriusAdminBundle:CRUD:edit_orm_many_to_one.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_many_to_many_widget %}
	{% include 'SeriusAdminBundle:CRUD:edit_orm_many_to_many.html.twig' %}
{% endblock %}

{% block sonata_admin_orm_one_to_many_widget %}
    {% include 'SeriusAdminBundle:CRUD:edit_orm_one_to_many.html.twig' %}
{% endblock %}

{# sonata_type_model_list #}
{% block sonata_type_model_list_widget %}
	{{ block('sonata_type_model_widget') }}
{% endblock %}

{# sonata_type_model_autocomplete #}
{% block sonata_type_model_autocomplete_widget %}
	{% spaceless %}
		{{ form_widget(form.title) }}

		{% for child in form %}
			{% if not child.rendered %}
				{{ form_widget(child) }}
			{% endif %}
		{% endfor %}

		{% include 'SeriusAdminBundle:CRUD:edit_orm_autocomplete_script.html.twig' %}
	{% endspaceless %}
{% endblock sonata_type_model_autocomplete_widget %}

{# sonata_type_admin #}
{% block sonata_type_admin_widget %}
	{% if sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_ONE') %}
		{{ block('sonata_admin_orm_one_to_one_widget') }}
	{% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_ONE') %}
		{{ block('sonata_admin_orm_many_to_one_widget') }}
	{% else %}
		INVALID MODE : {{ id }} - type : sonata_type_collection - mapping : {{ sonata_admin.field_description.mappingtype }}
	{% endif %}
{% endblock %}

{# sonata_type_collection #}
{% block sonata_type_collection_widget %}
    {% if sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::ONE_TO_MANY') %}
        {{ block('sonata_admin_orm_one_to_many_widget') }}
    {% elseif sonata_admin.field_description.mappingtype == constant('Doctrine\\ORM\\Mapping\\ClassMetadataInfo::MANY_TO_MANY') %}
        {{ block('sonata_admin_orm_many_to_many_widget') }}
    {% else %}
        INVALID MODE : {{ id }} - type : sonata_type_collection - mapping : {{ sonata_admin.field_description.mappingtype }}
    {% endif %}
{% endblock %}
